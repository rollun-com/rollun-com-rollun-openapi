<?php
declare(strict_types=1);

{{#operations}}

namespace {{package}};

use Articus\PathHandler\Annotation as PHA;
use Articus\PathHandler\Consumer as PHConsumer;
use Articus\PathHandler\Producer as PHProducer;
use Articus\PathHandler\Attribute as PHAttribute;
use Articus\PathHandler\Exception as PHException;
use OpenAPI\Server\Producer\Transfer;
use OpenAPI\Server\Handler\AbstractHandler;
use OpenAPI\Server\Rest\RestInterface;
use Psr\Http\Message\ServerRequestInterface;
use rollun\dic\InsideConstruct;

/**
{{#description}}
 * {{&description}}
{{/description}}
 * @PHA\Route(pattern="{{pathPattern}}")
 */
class {{classname}} extends AbstractHandler
{
    /**
     * ATTENTION! REST_OBJECT should be declared in service manager
     */
    public const REST_OBJECT = \{{{appName}}}\OpenAPI\V{{currentVersion}}\Server\Rest\{{operation.0.baseName}}::class;

    /**
     * {{classname}} constructor.
     *
     * @param RestInterface|null $restObject
     *
     * @throws \ReflectionException
     */
    public function __construct(RestInterface $restObject = null)
    {
        InsideConstruct::init(['restObject' => self::REST_OBJECT]);
    }

{{#operation}}
    /**
{{#summary}}
     * {{summary}}
{{/summary}}
{{#description}}
     * {{description}}
{{/description}}
     * @PHA\{{httpMethod}}
{{#vendorExtensions}}
{{#internal.ze-ph.hasQueryData}}
     * @PHA\Attribute(name=PHAttribute\Transfer::class, options={
     *     "type":{{internal.ze-ph.queryDataType}}::class,
     *     "objectAttr":"queryData",
     *     "errorAttr":"errors",
     *     "source": PHAttribute\Transfer::SOURCE_GET
     * })
{{/internal.ze-ph.hasQueryData}}
{{/vendorExtensions}}
{{#bodyParam}}
{{#consumes}}
     * @PHA\Consumer(name=PHConsumer\Json::class, mediaRange="{{{mediaType}}}")
{{/consumes}}
{{^isPrimitiveType}}
{{#isContainer}}
     * @PHA\Attribute(name=PHAttribute\Transfer::class, options={"type":"{{dataType}}","objectAttr":"bodyData", "errorAttr":"errors"})
{{/isContainer}}
{{^isContainer}}
     * @PHA\Attribute(name=PHAttribute\Transfer::class, options={"type":{{dataType}}::class,"objectAttr":"bodyData", "errorAttr":"errors"})
{{/isContainer}}
{{/isPrimitiveType}}
{{/bodyParam}}
{{#produces}}
     * @PHA\Producer(name=Transfer::class, mediaType="{{{mediaType}}}", options={"responseType":{{returnType}}::class})
{{/produces}}
     * @param ServerRequestInterface $request
{{#returnType}}
     *
     * @return array
{{/returnType}}
     */
    public function {{operationId}}(ServerRequestInterface $request)
    {
        return $this->runAction($request, '{{httpMethod}}', '{{operationId}}');
    }
{{/operation}}
}
{{/operations}}
